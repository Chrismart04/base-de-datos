
-- ========================================
-- TABLAS
-- ========================================

-- 1. Catálogo de tipos de cliente
CREATE TABLE TipoCliente(
    TipoClienteID NUMBER(3) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(30) UNIQUE NOT NULL
);

-- 2. Roles de empleados
CREATE TABLE Roles(
    RolID NUMBER(5) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(30) UNIQUE NOT NULL,
    Descripcion CLOB NULL,
    NombreRol VARCHAR2(50)
);

-- 3. Sucursales
CREATE TABLE Sucursales(
    SucursalID NUMBER(5) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(60) NOT NULL,
    Direccion VARCHAR2(200) NOT NULL,
    Telefono VARCHAR2(20) NULL,
    NombreSucursal VARCHAR2(100),
    CONSTRAINT UQ_Sucursales UNIQUE(Nombre, Direccion)
);

-- 4. Categorías de productos
CREATE TABLE CategoriasProducto(
    CategoriaID NUMBER(5) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(60) UNIQUE NOT NULL,
    Descripcion CLOB NULL
);

-- 5. Categorías de proveedores
CREATE TABLE CategoriasProveedor(
    CategoriaProvID NUMBER(5) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(60) UNIQUE NOT NULL
);

-- 6. Clientes
CREATE TABLE Clientes(
    ClienteID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TipoClienteID NUMBER(3) NOT NULL,
    Nombre VARCHAR2(60) NOT NULL,
    Apellido VARCHAR2(60) NOT NULL,
    Telefono VARCHAR2(20) NULL,
    Correo VARCHAR2(120) NULL,
    Direccion VARCHAR2(200) NULL,
    CONSTRAINT FK_Clientes_TipoCliente FOREIGN KEY (TipoClienteID) REFERENCES TipoCliente(TipoClienteID)
);

-- 7. Empleados
CREATE TABLE Empleados(
    EmpleadoID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RolID NUMBER(5) NOT NULL,
    Nombre VARCHAR2(60) NOT NULL,
    Apellido VARCHAR2(60) NOT NULL,
    Telefono VARCHAR2(20) NULL,
    Correo VARCHAR2(120) NULL,
    FechaIngreso DATE NOT NULL,
    Activo NUMBER(1) DEFAULT 1 NOT NULL,
    CONSTRAINT FK_Empleados_Roles FOREIGN KEY (RolID) REFERENCES Roles(RolID)
);

-- 8. Usuarios del sistema
CREATE TABLE Usuarios(
    UsuarioID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EmpleadoID NUMBER(10) UNIQUE NOT NULL,
    Username VARCHAR2(40) UNIQUE NOT NULL,
    PasswordHash VARCHAR2(255) NOT NULL,
    NombreUsuario VARCHAR2(50),
    Contrasenia VARCHAR2(100),
    CONSTRAINT FK_Usuarios_Empleado FOREIGN KEY (EmpleadoID) REFERENCES Empleados(EmpleadoID) ON DELETE CASCADE
);

-- 9. Turnos laborales
CREATE TABLE Turnos(
    TurnoID NUMBER(5) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(30) UNIQUE NOT NULL,
    HoraInicio TIMESTAMP NOT NULL,
    HoraFin TIMESTAMP NOT NULL,
    Activo NUMBER(1) DEFAULT 1
);

-- 10. Planilla
CREATE TABLE Planilla(
    PlanillaID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EmpleadoID NUMBER(10) NOT NULL,
    TurnoID NUMBER(5) NULL,
    PeriodoInicio DATE NOT NULL,
    PeriodoFin DATE NOT NULL,
    SalarioBruto NUMBER(10,2) NOT NULL,
    Deducciones NUMBER(10,2) DEFAULT 0 NOT NULL,
    SalarioNeto AS (SalarioBruto - Deducciones),
    Periodo VARCHAR2(20),
    Monto NUMBER(10,2),
    CONSTRAINT FK_Planilla_Empleado FOREIGN KEY (EmpleadoID) REFERENCES Empleados(EmpleadoID),
    CONSTRAINT FK_Planilla_Turno FOREIGN KEY (TurnoID) REFERENCES Turnos(TurnoID)
);

-- 11. Proveedores
CREATE TABLE Proveedores(
    ProveedorID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoriaProvID NUMBER(5) NULL,
    NombreEmpresa VARCHAR2(100) NOT NULL,
    Contacto VARCHAR2(60) NULL,
    Telefono VARCHAR2(20) NULL,
    RTN VARCHAR2(25) NULL,
    Direccion VARCHAR2(200) NULL,
    CONSTRAINT FK_Proveedores_Categoria FOREIGN KEY (CategoriaProvID) REFERENCES CategoriasProveedor(CategoriaProvID)
);

-- 12. Productos
CREATE TABLE Productos(
    ProductoID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoriaID NUMBER(5) NOT NULL,
    ProveedorID NUMBER(10) NULL,
    Nombre VARCHAR2(100) NOT NULL,
    Descripcion CLOB NULL,
    PrecioVenta NUMBER(10,2) NOT NULL,
    StockGlobal NUMBER(10) DEFAULT 0 NOT NULL,
    CONSTRAINT FK_Productos_Categoria FOREIGN KEY (CategoriaID) REFERENCES CategoriasProducto(CategoriaID),
    CONSTRAINT FK_Productos_Proveedor FOREIGN KEY (ProveedorID) REFERENCES Proveedores(ProveedorID)
);

-- 13. Inventario por sucursal
CREATE TABLE Inventario(
    SucursalID NUMBER(5) NOT NULL,
    ProductoID NUMBER(10) NOT NULL,
    Stock NUMBER(10) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_Inventario PRIMARY KEY(SucursalID, ProductoID),
    CONSTRAINT FK_Inventario_Sucursal FOREIGN KEY (SucursalID) REFERENCES Sucursales(SucursalID),
    CONSTRAINT FK_Inventario_Producto FOREIGN KEY (ProductoID) REFERENCES Productos(ProductoID)
);

-- 14. Compras
CREATE TABLE Compras(
    CompraID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EmpleadoID NUMBER(10) NOT NULL,
    ProveedorID NUMBER(10) NOT NULL,
    SucursalID NUMBER(5) NOT NULL,
    FechaHora TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CostoTotal NUMBER(12,2) NULL,
    CONSTRAINT FK_Compras_Empleado FOREIGN KEY (EmpleadoID) REFERENCES Empleados(EmpleadoID),
    CONSTRAINT FK_Compras_Proveedor FOREIGN KEY (ProveedorID) REFERENCES Proveedores(ProveedorID),
    CONSTRAINT FK_Compras_Sucursal FOREIGN KEY (SucursalID) REFERENCES Sucursales(SucursalID)
);

-- 15. Detalle de compras
CREATE TABLE DetalleCompras(
    DetalleCompraID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CompraID NUMBER(19) NOT NULL,
    ProductoID NUMBER(10) NOT NULL,
    Cantidad NUMBER(10) NOT NULL,
    CostoUnitario NUMBER(10,2) NOT NULL,
    CONSTRAINT FK_DetalleCompras_Producto FOREIGN KEY (ProductoID) REFERENCES Productos(ProductoID)
);

-- 16. Ventas
CREATE TABLE Ventas(
    VentaID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EmpleadoID NUMBER(10) NOT NULL,
    ClienteID NUMBER(10) NOT NULL,
    SucursalID NUMBER(5) NOT NULL,
    FechaHora TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    Total NUMBER(12,2) NULL,
    CONSTRAINT FK_Ventas_Empleado FOREIGN KEY (EmpleadoID) REFERENCES Empleados(EmpleadoID),
    CONSTRAINT FK_Ventas_Cliente FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID),
    CONSTRAINT FK_Ventas_Sucursal FOREIGN KEY (SucursalID) REFERENCES Sucursales(SucursalID)
);

-- 17. Detalle de ventas
CREATE TABLE DetalleVentas(
    DetalleID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    VentaID NUMBER(19) NOT NULL,
    ProductoID NUMBER(10) NOT NULL,
    Cantidad NUMBER(10) NOT NULL,
    PrecioUnitario NUMBER(10,2) NOT NULL,
    CONSTRAINT FK_DetalleVentas_Venta FOREIGN KEY (VentaID) REFERENCES Ventas(VentaID) ON DELETE CASCADE,
    CONSTRAINT FK_DetalleVentas_Producto FOREIGN KEY (ProductoID) REFERENCES Productos(ProductoID)
);

-- 18. Facturas
CREATE TABLE Facturas(
    FacturaID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    VentaID NUMBER(19) UNIQUE NOT NULL,
    NumeroFiscal VARCHAR2(45) NOT NULL,
    FechaEmision TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT FK_Facturas_Venta FOREIGN KEY (VentaID) REFERENCES Ventas(VentaID) ON DELETE CASCADE
);

-- 19. AuditoriaGeneral
CREATE TABLE AuditoriaGeneral(
    AuditoriaID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NombreTabla VARCHAR2(50) NOT NULL,
    Operacion VARCHAR2(10) NOT NULL CHECK (Operacion IN (''INSERT'', ''UPDATE'', ''DELETE'')),
    UsuarioSistema VARCHAR2(128) DEFAULT USER NOT NULL,
    UsuarioApp VARCHAR2(40) NULL,
    FechaHora TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    HostName VARCHAR2(128) NULL,
    AppName VARCHAR2(128) NULL,
    RegistroID VARCHAR2(50) NOT NULL,
    ValoresAnteriores CLOB NULL,
    ValoresNuevos CLOB NULL,
    Observaciones VARCHAR2(500) NULL
);

-- 20. HistorialPrecios
CREATE TABLE HistorialPrecios(
    HistorialID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductoID NUMBER(10) NOT NULL,
    PrecioAnterior NUMBER(10,2) NOT NULL,
    PrecioNuevo NUMBER(10,2) NOT NULL,
    FechaCambio TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UsuarioCambio VARCHAR2(40) NULL,
    CONSTRAINT FK_HistorialPrecios_Producto FOREIGN KEY (ProductoID) REFERENCES Productos(ProductoID)
);

-- 21. DescuentosPromociones
CREATE TABLE DescuentosPromociones(
    DescuentoID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductoID NUMBER(10) NOT NULL,
    PorcentajeDescuento NUMBER(5,2) CHECK (PorcentajeDescuento BETWEEN 0 AND 100),
    FechaInicio DATE NOT NULL,
    FechaFin DATE NOT NULL,
    CONSTRAINT FK_Descuentos_Producto FOREIGN KEY (ProductoID) REFERENCES Productos(ProductoID)
);

-- 22. DevolucionesVentas
CREATE TABLE DevolucionesVentas(
    DevolucionID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    VentaID NUMBER(19) NOT NULL,
    FechaDevolucion TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    Motivo VARCHAR2(300) NULL,
    CONSTRAINT FK_Devoluciones_Venta FOREIGN KEY (VentaID) REFERENCES Ventas(VentaID)
);

-- 23. BitacoraAccesos
CREATE TABLE BitacoraAccesos(
    AccesoID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UsuarioID NUMBER(10) NOT NULL,
    FechaHora TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    TipoAcceso VARCHAR2(10) CHECK (TipoAcceso IN (''LOGIN'',''LOGOUT'')) NOT NULL,
    IP_Acceso VARCHAR2(45) NULL,
    Dispositivo VARCHAR2(100) NULL,
    CONSTRAINT FK_Bitacora_Usuario FOREIGN KEY (UsuarioID) REFERENCES Usuarios(UsuarioID)
);

-- 24. ContactosClientes
CREATE TABLE ContactosClientes(
    ContactoID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ClienteID NUMBER(10) NOT NULL,
    NombreContacto VARCHAR2(100) NOT NULL,
    Telefono VARCHAR2(20) NULL,
    Correo VARCHAR2(100) NULL,
    Relacion VARCHAR2(50) NULL,
    CONSTRAINT FK_Contacto_Cliente FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID)
);

-- 25. DocumentosAdjuntos
CREATE TABLE DocumentosAdjuntos(
    DocumentoID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TablaReferencia VARCHAR2(50) NOT NULL,
    RegistroID VARCHAR2(50) NOT NULL,
    NombreArchivo VARCHAR2(100),
    RutaArchivo VARCHAR2(500),
    FechaCarga TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UsuarioCarga VARCHAR2(40) NULL
);

-- 26. ConfiguracionSistema
CREATE TABLE ConfiguracionSistema(
    ParametroID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NombreParametro VARCHAR2(50) UNIQUE NOT NULL,
    ValorParametro VARCHAR2(300) NOT NULL,
    Descripcion VARCHAR2(500) NULL
);

-- 27. LogErroresSistema
CREATE TABLE LogErroresSistema(
    ErrorID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FechaHora TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    MensajeError CLOB NOT NULL,
    Procedimiento VARCHAR2(200) NULL,
    Linea NUMBER(10) NULL,
    UsuarioSistema VARCHAR2(128) DEFAULT USER NULL,
    AppOrigen VARCHAR2(100) NULL
);

-- 28. TareasProgramadas
CREATE TABLE TareasProgramadas(
    TareaID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NombreTarea VARCHAR2(100) NOT NULL,
    Frecuencia VARCHAR2(20) NOT NULL,
    HoraEjecucion TIMESTAMP NOT NULL,
    UltimaEjecucion TIMESTAMP NULL,
    Activa NUMBER(1) DEFAULT 1 NOT NULL,
    Descripcion VARCHAR2(500) NULL
);

-- 29. NotificacionesSistema
CREATE TABLE NotificacionesSistema(
    NotificacionID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UsuarioID NUMBER(10) NULL,
    ClienteID NUMBER(10) NULL,
    Titulo VARCHAR2(100) NOT NULL,
    Mensaje CLOB NOT NULL,
    FechaEnvio TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    MedioEnvio VARCHAR2(30) CHECK (MedioEnvio IN (''Correo'', ''App'', ''SMS'')) NOT NULL,
    CONSTRAINT FK_Notif_Usuario FOREIGN KEY (UsuarioID) REFERENCES Usuarios(UsuarioID),
    CONSTRAINT FK_Notif_Cliente FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID)
);

-- 30. LogsConsultasSQL
CREATE TABLE LogsConsultasSQL(
    LogID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UsuarioID NUMBER(10) NULL,
    ConsultaSQL CLOB NOT NULL,
    FechaHora TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    Origen VARCHAR2(50) NULL,
    CONSTRAINT FK_LogSQL_Usuario FOREIGN KEY (UsuarioID) REFERENCES Usuarios(UsuarioID)
);

-- Índices
CREATE INDEX IX_Ventas_FechaHora ON Ventas(FechaHora);
CREATE INDEX IX_Compras_FechaHora ON Compras(FechaHora);
CREATE INDEX IX_DetalleVentas_ProductoID ON DetalleVentas(ProductoID);
CREATE INDEX IX_DetalleCompras_ProductoID ON DetalleCompras(ProductoID);
CREATE INDEX IX_Auditoria_Tabla_Fecha ON AuditoriaGeneral(NombreTabla, FechaHora);
CREATE INDEX IX_Auditoria_Usuario_Fecha ON AuditoriaGeneral(UsuarioSistema, FechaHora);

-- ========================================
-- TRIGGERS
-- ========================================

CREATE OR REPLACE TRIGGER tgr_AuditarUpdateClientes
AFTER UPDATE ON Clientes
FOR EACH ROW
BEGIN
    INSERT INTO AuditoriaGeneral (
        NombreTabla, Operacion, UsuarioSistema, UsuarioApp, FechaHora,
        HostName, AppName, RegistroID, ValoresAnteriores, ValoresNuevos, Observaciones
    ) VALUES (
        ''Clientes'', ''UPDATE'', USER, NULL, SYSTIMESTAMP,
        SYS_CONTEXT(''USERENV'', ''HOST''), SYS_CONTEXT(''USERENV'', ''MODULE''), :NEW.ClienteID,
        JSON_OBJECT(
            ''ClienteID'' VALUE :OLD.ClienteID, ''TipoClienteID'' VALUE :OLD.TipoClienteID, ''Nombre'' VALUE :OLD.Nombre,
            ''Apellido'' VALUE :OLD.Apellido, ''Telefono'' VALUE :OLD.Telefono, ''Correo'' VALUE :OLD.Correo, ''Direccion'' VALUE :OLD.Direccion
        ),
        JSON_OBJECT(
            ''ClienteID'' VALUE :NEW.ClienteID, ''TipoClienteID'' VALUE :NEW.TipoClienteID, ''Nombre'' VALUE :NEW.Nombre,
            ''Apellido'' VALUE :NEW.Apellido, ''Telefono'' VALUE :NEW.Telefono, ''Correo'' VALUE :NEW.Correo, ''Direccion'' VALUE :NEW.Direccion
        ),
        ''Actualización de cliente desde trigger automático''
    );
END;
/

CREATE OR REPLACE TRIGGER tgr_AuditarUpdateSucursales
AFTER UPDATE ON Sucursales
FOR EACH ROW
BEGIN
    INSERT INTO AuditoriaGeneral (
        NombreTabla, Operacion, UsuarioSistema, UsuarioApp, FechaHora,
        HostName, AppName, RegistroID, ValoresAnteriores, ValoresNuevos, Observaciones
    ) VALUES (
        ''Sucursales'', ''UPDATE'', USER, NULL, SYSTIMESTAMP,
        SYS_CONTEXT(''USERENV'', ''HOST''), SYS_CONTEXT(''USERENV'', ''MODULE''), :NEW.SucursalID,
        JSON_OBJECT(''SucursalID'' VALUE :OLD.SucursalID, ''Nombre'' VALUE :OLD.Nombre, ''Direccion'' VALUE :OLD.Direccion),
        JSON_OBJECT(''SucursalID'' VALUE :NEW.SucursalID, ''Nombre'' VALUE :NEW.Nombre, ''Direccion'' VALUE :NEW.Direccion),
        ''Actualización de sucursal desde trigger automático''
    );
END;
/

CREATE OR REPLACE TRIGGER tgr_BorrarProductoInventario
AFTER DELETE ON Productos
FOR EACH ROW
BEGIN
    DELETE FROM Inventario WHERE ProductoID = :OLD.ProductoID;
END;
/

CREATE OR REPLACE TRIGGER tgr_AfterInsert_Empleados_AddUser
AFTER INSERT ON Empleados
FOR EACH ROW
BEGIN
    INSERT INTO Usuarios (EmpleadoID, Username, PasswordHash)
    VALUES (:NEW.EmpleadoID, ''user_'' || :NEW.EmpleadoID, ''default_password'');
END;
/

CREATE OR REPLACE TRIGGER tgr_AfterDeleteLogico_Empleados
INSTEAD OF DELETE ON Empleados
FOR EACH ROW
BEGIN
    UPDATE Empleados SET Activo = 0 WHERE EmpleadoID = :OLD.EmpleadoID;
END;
/

CREATE OR REPLACE TRIGGER tgr_PreventDeleteRolEnUso
INSTEAD OF DELETE ON Roles
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM Empleados WHERE RolID = :OLD.RolID;
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, ''No se puede eliminar un rol que está asignado a un empleado.'');
    ELSE
        DELETE FROM Roles WHERE RolID = :OLD.RolID;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_Auditoria_Generic
AFTER INSERT OR UPDATE OR DELETE ON Clientes
FOR EACH ROW
DECLARE
    v_operacion VARCHAR2(10);
    v_old_values CLOB;
    v_new_values CLOB;
BEGIN
    IF INSERTING THEN
        v_operacion := ''INSERT'';
        v_new_values := ''Nombre: '' || :NEW.Nombre || '' '' || :NEW.Apellido;
    ELSIF UPDATING THEN
        v_operacion := ''UPDATE'';
        v_old_values := ''Nombre: '' || :OLD.Nombre || '' '' || :OLD.Apellido;
        v_new_values := ''Nombre: '' || :NEW.Nombre || '' '' || :NEW.Apellido;
    ELSIF DELETING THEN
        v_operacion := ''DELETE'';
        v_old_values := ''Nombre: '' || :OLD.Nombre || '' '' || :OLD.Apellido;
    END IF;

    INSERT INTO AuditoriaGeneral (NombreTabla, Operacion, RegistroID, ValoresAnteriores, ValoresNuevos)
    VALUES (''Clientes'', v_operacion, COALESCE(:NEW.ClienteID, :OLD.ClienteID), v_old_values, v_new_values);
END;
/


-- ========================================
-- PROCEDIMIENTOS
-- ========================================

CREATE OR REPLACE PROCEDURE sp_CrearSucursal(
    p_NombreSucursal IN VARCHAR2,
    p_Direccion IN VARCHAR2
)
AS
BEGIN
    INSERT INTO Sucursales (Nombre, Direccion)
    VALUES (p_NombreSucursal, p_Direccion);
END;
/

CREATE OR REPLACE PROCEDURE sp_CrearUsuarioParaEmpleado(
    p_EmpleadoID IN NUMBER,
    p_NombreUsuario IN VARCHAR2,
    p_Contrasenia IN VARCHAR2
)
AS
BEGIN
    UPDATE Usuarios
    SET Username = p_NombreUsuario,
        PasswordHash = p_Contrasenia
    WHERE EmpleadoID = p_EmpleadoID;
END;
/

CREATE OR REPLACE PROCEDURE sp_AsignarRolAEmpleado(
    p_EmpleadoID IN NUMBER,
    p_RolID IN NUMBER
)
AS
BEGIN
    UPDATE Empleados
    SET RolID = p_RolID
    WHERE EmpleadoID = p_EmpleadoID;
END;
/

CREATE OR REPLACE PROCEDURE sp_ActualizarTipoCliente(
    p_ClienteID IN NUMBER,
    p_NuevoTipoClienteID IN NUMBER
)
AS
BEGIN
    UPDATE Clientes
    SET TipoClienteID = p_NuevoTipoClienteID
    WHERE ClienteID = p_ClienteID;
END;
/

CREATE OR REPLACE PROCEDURE sp_ListarUsuariosConRol
AS
    CURSOR c_usuarios IS
        SELECT U.UsuarioID, U.Username, E.EmpleadoID, R.RolID, R.Nombre
        FROM Usuarios U
        INNER JOIN Empleados E ON U.EmpleadoID = E.EmpleadoID
        INNER JOIN Roles R ON E.RolID = R.RolID;
BEGIN
    FOR rec IN c_usuarios LOOP
        DBMS_OUTPUT.PUT_LINE(''UsuarioID: '' || rec.UsuarioID || '', Rol: '' || rec.Nombre);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE sp_RegistrarEmpleado(
    p_RolID IN NUMBER
)
AS
BEGIN
    INSERT INTO Empleados (RolID, Nombre, Apellido, FechaIngreso, Activo)
    VALUES (p_RolID, ''Nuevo'', ''Empleado'', SYSDATE, 1);
END;
/

CREATE OR REPLACE PROCEDURE sp_ListarEmpleadosPorRol(
    p_RolID IN NUMBER
)
AS
    CURSOR c_empleados IS
        SELECT E.EmpleadoID, E.Nombre, E.Apellido
        FROM Empleados E
        WHERE E.RolID = p_RolID AND E.Activo = 1;
BEGIN
    FOR rec IN c_empleados LOOP
        DBMS_OUTPUT.PUT_LINE(''Empleado: '' || rec.Nombre || '' '' || rec.Apellido);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE sp_CambiarEstadoEmpleado(
    p_EmpleadoID IN NUMBER,
    p_NuevoEstado IN NUMBER
)
AS
BEGIN
    UPDATE Empleados
    SET Activo = p_NuevoEstado
    WHERE EmpleadoID = p_EmpleadoID;
END;
/

CREATE OR REPLACE PROCEDURE sp_ListarCambiosPorTabla(
  p_NombreTabla IN VARCHAR2
)
AS
  CURSOR c_audit IS
    SELECT *
    FROM AuditoriaGeneral
    WHERE NombreTabla = p_NombreTabla
    ORDER BY FechaHora DESC;
BEGIN
  FOR rec IN c_audit LOOP
     DBMS_OUTPUT.PUT_LINE(''ID: '' || rec.AuditoriaID || '' Op: '' || rec.Operacion);
  END LOOP;
END;
/

-- ========================================
-- VISTAS
-- ========================================

CREATE OR REPLACE VIEW vw_Clientes_Completo AS
SELECT c.ClienteID, c.Nombre, c.Apellido, tc.Nombre AS TipoCliente, c.Telefono, c.Correo, c.Direccion
FROM Clientes c
JOIN TipoCliente tc ON c.TipoClienteID = tc.TipoClienteID;
/

CREATE OR REPLACE VIEW vw_Clientes_Contactos AS
SELECT cc.ContactoID, cc.ClienteID, c.Nombre || '' '' || c.Apellido AS Cliente,
       cc.NombreContacto, cc.Telefono, cc.Correo, cc.Relacion
FROM ContactosClientes cc
JOIN Clientes c ON cc.ClienteID = c.ClienteID;
/

CREATE OR REPLACE VIEW vw_Clientes_VIP AS
SELECT * FROM vw_Clientes_Completo WHERE TipoCliente = ''VIP'';
/

CREATE OR REPLACE VIEW vw_Count_Clientes_Por_Tipo AS
SELECT tc.Nombre AS TipoCliente, COUNT(*) AS CantidadClientes
FROM Clientes c
JOIN TipoCliente tc ON c.TipoClienteID = tc.TipoClienteID
GROUP BY tc.Nombre;
/

CREATE OR REPLACE VIEW vw_Clientes_FullName AS
SELECT ClienteID, Nombre || '' '' || Apellido AS NombreCompleto, Telefono, Correo
FROM Clientes;
/

CREATE OR REPLACE VIEW vw_Ventas_Detalle AS
SELECT v.VentaID, v.FechaHora, e.Nombre || '' '' || e.Apellido AS Vendedor,
       c.Nombre || '' '' || c.Apellido AS Cliente, v.SucursalID, v.Total
FROM Ventas v
JOIN Empleados e ON v.EmpleadoID = e.EmpleadoID
JOIN Clientes c ON v.ClienteID = c.ClienteID;
/

CREATE OR REPLACE VIEW vw_Ventas_Productos AS
SELECT dv.VentaID, p.Nombre AS Producto, dv.Cantidad, dv.PrecioUnitario, (dv.Cantidad * dv.PrecioUnitario) AS Subtotal
FROM DetalleVentas dv
JOIN Productos p ON dv.ProductoID = p.ProductoID;
/

CREATE OR REPLACE VIEW vw_Ventas_Completo AS
SELECT vd.*, vp.Producto, vp.Cantidad, vp.PrecioUnitario, vp.Subtotal
FROM vw_Ventas_Detalle vd
JOIN vw_Ventas_Productos vp ON vd.VentaID = vp.VentaID;
/

CREATE OR REPLACE VIEW vw_Ventas_Por_Sucursal AS
SELECT SucursalID, COUNT(*) AS NumeroVentas, SUM(Total) AS TotalVentas
FROM Ventas
GROUP BY SucursalID;
/

CREATE OR REPLACE VIEW vw_Ventas_Por_Cliente AS
SELECT ClienteID, COUNT(*) AS NumeroCompras, SUM(Total) AS TotalGastado
FROM Ventas
GROUP BY ClienteID;
/

CREATE OR REPLACE VIEW vw_Compras_Detalle AS
SELECT c.CompraID, c.FechaHora, e.Nombre || '' '' || e.Apellido AS Comprador,
       pr.NombreEmpresa AS Proveedor, c.SucursalID, c.CostoTotal
FROM Compras c
JOIN Empleados e ON c.EmpleadoID = e.EmpleadoID
JOIN Proveedores pr ON c.ProveedorID = pr.ProveedorID;
/

CREATE OR REPLACE VIEW vw_Compras_Productos AS
SELECT dc.CompraID, p.Nombre AS Producto, dc.Cantidad, dc.CostoUnitario, (dc.Cantidad * dc.CostoUnitario) AS Subtotal
FROM DetalleCompras dc
JOIN Productos p ON dc.ProductoID = p.ProductoID;
/

CREATE OR REPLACE VIEW vw_Compras_Completo AS
SELECT cd.*, cp.Producto, cp.Cantidad, cp.CostoUnitario, cp.Subtotal
FROM vw_Compras_Detalle cd
JOIN vw_Compras_Productos cp ON cd.CompraID = cp.CompraID;
/

CREATE OR REPLACE VIEW vw_Gastos_Por_Proveedor AS
SELECT ProveedorID, SUM(CostoTotal) AS TotalComprado, COUNT(*) AS NumeroCompras
FROM Compras
GROUP BY ProveedorID;
/

CREATE OR REPLACE VIEW vw_Compras_Por_Sucursal AS
SELECT SucursalID, COUNT(*) AS NumeroCompras, SUM(CostoTotal) AS TotalCompras
FROM Compras
GROUP BY SucursalID;
/

CREATE OR REPLACE VIEW vw_Inventario_Sucursal AS
SELECT i.SucursalID, p.ProductoID, p.Nombre AS Producto, i.Stock
FROM Inventario i
JOIN Productos p ON i.ProductoID = p.ProductoID;
/

CREATE OR REPLACE VIEW vw_Inventario_Global AS
SELECT ProductoID, Nombre, StockGlobal
FROM Productos;
/

CREATE OR REPLACE VIEW vw_Stock_Por_Producto AS
SELECT p.ProductoID, p.Nombre,
       p.StockGlobal, NVL(SUM(i.Stock),0) AS StockDistribuido
FROM Productos p
LEFT JOIN Inventario i ON p.ProductoID = i.ProductoID
GROUP BY p.ProductoID, p.Nombre, p.StockGlobal;
/

CREATE OR REPLACE VIEW vw_Stock_Bajo AS
SELECT ProductoID, Nombre, StockGlobal
FROM Productos
WHERE StockGlobal < 10;
/

CREATE OR REPLACE VIEW vw_Stock_Por_Categoria AS
SELECT cp.Nombre AS Categoria, COUNT(*) AS NumeroProductos, SUM(p.StockGlobal) AS StockTotal
FROM Productos p
JOIN CategoriasProducto cp ON p.CategoriaID = cp.CategoriaID
GROUP BY cp.Nombre;
/

CREATE OR REPLACE VIEW vw_Auditoria_General AS
SELECT AuditoriaID, NombreTabla, Operacion, UsuarioSistema, UsuarioApp, FechaHora, RegistroID
FROM AuditoriaGeneral;
/

CREATE OR REPLACE VIEW vw_LogErrores_Reciente AS
SELECT ErrorID, FechaHora, MensajeError, Procedimiento, Linea, UsuarioSistema, AppOrigen
FROM LogErroresSistema
ORDER BY FechaHora DESC
FETCH FIRST 50 ROWS ONLY;
/

CREATE OR REPLACE VIEW vw_Bitacora_Accesos AS
SELECT ba.UsuarioID, u.Username, ba.FechaHora, ba.TipoAcceso, ba.IP_Acceso, ba.Dispositivo
FROM BitacoraAccesos ba
JOIN Usuarios u ON ba.UsuarioID = u.UsuarioID;
/

CREATE OR REPLACE VIEW vw_LoginCount_Per_Usuario AS
SELECT UsuarioID, COUNT(*) AS TotalAccesos
FROM BitacoraAccesos
WHERE TipoAcceso = ''LOGIN''
GROUP BY UsuarioID;
/

CREATE OR REPLACE VIEW vw_LogsConsultasSQL AS
SELECT LogID, UsuarioID, FechaHora, Origen, SUBSTR(ConsultaSQL,1,200) AS ConsultaPreview
FROM LogsConsultasSQL;
/

CREATE OR REPLACE VIEW vw_HistorialPrecios_Reciente AS
SELECT HistorialID, ProductoID, PrecioAnterior, PrecioNuevo, FechaCambio, UsuarioCambio
FROM HistorialPrecios
ORDER BY FechaCambio DESC;
/

CREATE OR REPLACE VIEW vw_Promociones_Activas AS
SELECT DescuentoID, ProductoID, PorcentajeDescuento, FechaInicio, FechaFin
FROM DescuentosPromociones
WHERE FechaInicio <= SYSDATE AND FechaFin >= SYSDATE;
/

CREATE OR REPLACE VIEW vw_Promociones_Por_Producto AS
SELECT p.Nombre AS Producto, dp.PorcentajeDescuento, dp.FechaInicio, dp.FechaFin
FROM DescuentosPromociones dp
JOIN Productos p ON dp.ProductoID = p.ProductoID;
/

CREATE OR REPLACE VIEW vw_CambiosPrecio_Usuario AS
SELECT hp.UsuarioCambio, COUNT(*) AS CambiosRealizados, MIN(FechaCambio) AS PrimeraFecha, MAX(FechaCambio) AS UltimaFecha
FROM HistorialPrecios hp
GROUP BY UsuarioCambio;
/

CREATE OR REPLACE VIEW vw_Empleados_Completo AS
SELECT e.EmpleadoID, e.Nombre || '' '' || e.Apellido AS Empleado, r.Nombre AS Rol, e.FechaIngreso, e.Activo
FROM Empleados e
JOIN Roles r ON e.RolID = r.RolID;
/

CREATE OR REPLACE VIEW vw_Turnos_Disponibles AS
SELECT TurnoID, Nombre, HoraInicio, HoraFin FROM Turnos;
/

CREATE OR REPLACE VIEW vw_Planilla_Resumen AS
SELECT pl.EmpleadoID, e.Nombre || '' '' || e.Apellido AS Empleado,
       pl.PeriodoInicio, pl.PeriodoFin,
       SUM(pl.SalarioBruto) AS TotalBruto, SUM(pl.Deducciones) AS TotalDeducciones,
       SUM(pl.SalarioNeto) AS TotalNeto
FROM Planilla pl
JOIN Empleados e ON pl.EmpleadoID = e.EmpleadoID
GROUP BY pl.EmpleadoID, e.Nombre, e.Apellido, pl.PeriodoInicio, pl.PeriodoFin;
/

CREATE OR REPLACE VIEW vw_Empleados_Activos AS
SELECT EmpleadoID, Nombre || '' '' || Apellido AS NombreCompleto, Rol,
       FechaIngreso
FROM vw_Empleados_Completo
WHERE Activo = 1;
/

CREATE OR REPLACE VIEW vw_Notificaciones_Recientes AS
SELECT NotificacionID, Titulo, Mensaje, FechaEnvio, MedioEnvio, UsuarioID, ClienteID
FROM NotificacionesSistema
WHERE FechaEnvio >= SYSDATE - 30;
/

CREATE OR REPLACE VIEW vw_Notificaciones_Por_Medio AS
SELECT MedioEnvio, COUNT(*) AS Total
FROM NotificacionesSistema
GROUP BY MedioEnvio;
/

CREATE OR REPLACE VIEW vw_Documentos_Por_Tabla AS
SELECT TablaReferencia, COUNT(*) AS TotalDocumentos
FROM DocumentosAdjuntos
GROUP BY TablaReferencia;
/

CREATE OR REPLACE VIEW vw_Documentos_Recientes AS
SELECT DocumentoID, TablaReferencia, RegistroID, NombreArchivo, FechaCarga, UsuarioCarga
FROM DocumentosAdjuntos
WHERE FechaCarga >= SYSDATE - 30;
/

CREATE OR REPLACE VIEW vw_ConfiguracionSistema AS
SELECT NombreParametro, ValorParametro, Descripcion
FROM ConfiguracionSistema;
/

CREATE OR REPLACE VIEW vw_Devoluciones_Detalle AS
SELECT dv.DevolucionID, dv.VentaID, v.FechaHora AS FechaVenta,
       dv.FechaDevolucion, dv.Motivo,
       c.Nombre || '' '' || c.Apellido AS Cliente
FROM DevolucionesVentas dv
JOIN Ventas v ON dv.VentaID = v.VentaID
JOIN Clientes c ON v.ClienteID = c.ClienteID;
/

COMMIT;
